{"version":3,"sources":["excelParser/getStatus.js","components/compareFunctions.js","components/ScoreTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","taskMap","taskName","mark","get","trim","taskStatus","sortTaskNames","a","b","sortStudentsTaskNames","task","ScoreTable","_this$props","this","props","students","tasks","sort","tasksMap","Map","forEach","element","set","studentsData","map","student","value","key","exists","member","push","status","getStatus","filter","studentsElements","react_default","createElement","idGenerator","style","backgroundColor","href","concat","studentName","className","taskElements","taskLink","target","rel","Component","options","dashboard","mentors","item","label","mentor","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selectedOption","JSON","parse","localStorage","getItem","handleChange","bind","assertThisInitialized","setItem","stringify","setState","scoreTableData","react","react_select_esm","onChange","src_components_ScoreTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0770295.chunk.js","sourcesContent":["function getStatus(taskMap, taskName, mark) {\n  const taskMapElement = taskMap.get(taskName.trim());\n  if (taskMapElement) {\n    switch (taskMap.get(taskName.trim()).taskStatus) {\n      case 'Checked':\n        if (!mark) return 'red';\n        return 'green';\n      case 'Checking':\n        if (!mark) return 'lightcoral';\n        return 'green';\n      case 'In Progress':\n        if (!mark) return 'yellow';\n        return 'green';\n      case 'ToDo':\n        return 'grey';\n      default:\n        return '';\n    }\n  } else {\n    return '';\n  }\n}\nmodule.exports = getStatus;\n","// functions for sorting arrays\nexport function sortTaskNames(a, b) {\n  if (a[0] === b[0]) {\n    return 0;\n  }\n  return (a[0] < b[0]) ? -1 : 1;\n}\nexport function sortStudentsTaskNames(a, b) {\n  if (a.task === b.task) {\n    return 0;\n  }\n  return (a.task < b.task) ? -1 : 1;\n}\n","/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable react/prefer-stateless-function */\nimport React, { Component } from 'react';\nimport idGenerator from 'react-id-generator';\nimport getStatus from '../excelParser/getStatus';\nimport { sortTaskNames, sortStudentsTaskNames } from './compareFunctions';\nimport './ScoreTable.css';\n\nclass ScoreTable extends Component {\n  render() {\n    const { students, tasks } = this.props;\n    if (students) {\n      tasks.sort(sortTaskNames);\n      const tasksMap = new Map();\n      tasks.forEach((element) => {\n        tasksMap.set(element[0].trim(), element[1]);\n      });\n      const studentsData = students.map((student) => {\n        tasksMap.forEach((value, key) => {\n          let exists = false;\n          student.tasks.forEach((member) => {\n            if (member.task === key) {\n              exists = true;\n            }\n          });\n          if (!exists) {\n            student.tasks.push({ task: key, status: getStatus(tasksMap, key, 0) });\n          }\n        });\n\n        student.tasks.sort(sortStudentsTaskNames);\n        student.tasks = student.tasks.filter(element => element.status);\n        const studentsElements = student.tasks.map(task => (\n          <td key={idGenerator()} style={{ backgroundColor: task.status }} />\n        ));\n        return (\n          <tr key={idGenerator()}>\n            <td>\n              <a href={`https://github.com/${student.studentName}`} className=\"githubLinks\">{student.studentName}</a>\n            </td>\n            {studentsElements}\n          </tr>\n        );\n      });\n      const taskElements = tasks.map(task => (\n        <th key={idGenerator()}>\n          <a href={task[1].taskLink} className=\"githubLinks\" target=\"_blank\" rel=\"noopener noreferrer\">{task[0]}</a>\n        </th>\n      ));\n      return (\n        <table>\n          <tbody>\n            <tr>\n              <th>Students</th>\n              {taskElements}\n            </tr>\n            {studentsData}\n          </tbody>\n        </table>\n      );\n    }\n    return (\n      <div>Ready to work</div>\n    );\n  }\n}\nexport default ScoreTable;\n","/* eslint-disable react/jsx-filename-extension */\nimport React, { Component, Fragment } from 'react';\nimport Select from 'react-select';\nimport './App.css';\nimport dashboard from './excelParser/dashboard.json';\nimport ScoreTable from './components/ScoreTable';\n\nconst options = dashboard.mentors.map(item => ({ value: item.students, label: item.mentor }));\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      selectedOption: JSON.parse(localStorage.getItem('mentor')),\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(selectedOption) {\n    localStorage.setItem('mentor', JSON.stringify(selectedOption));\n    this.setState({ selectedOption });\n  }\n\n  render() {\n    // console.log(this.state);\n    const { selectedOption } = this.state;\n    const scoreTableData = selectedOption ? selectedOption.value : selectedOption;\n    return (\n      <Fragment>\n        <Select\n          value={selectedOption}\n          onChange={this.handleChange}\n          options={options}\n        />\n        <ScoreTable students={scoreTableData} tasks={dashboard.tasks} />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}